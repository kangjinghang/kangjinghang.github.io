<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丽璟园</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lijingyuan.top/"/>
  <updated>2019-07-19T09:48:31.888Z</updated>
  <id>https://lijingyuan.top/</id>
  
  <author>
    <name>kangjinghang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重学Java数据结构和算法（查找算法）</title>
    <link href="https://lijingyuan.top/2019/07/19/%E9%87%8D%E5%AD%A6Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%EF%BC%88%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>https://lijingyuan.top/2019/07/19/重学Java数据结构和算法（查找算法）/</id>
    <published>2019-07-19T07:59:46.000Z</published>
    <updated>2019-07-19T09:48:31.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找算法介绍"><a href="#查找算法介绍" class="headerlink" title="查找算法介绍"></a>查找算法介绍</h1><p>在java 中，我们常用的查找有四种:</p><ul><li><p>顺序(线性)查找</p></li><li><p>二分查找/折半查找</p></li><li><p>插值查找</p></li><li><p>斐波那契查找</p></li></ul><h1 id="线性查找算法"><a href="#线性查找算法" class="headerlink" title="线性查找算法"></a>线性查找算法</h1><p>有一个数列： {1,8, 10, 89, 1000, 1234} ，判断数列中是否包含此名称【顺序查找】要求: 如果找到了，就提示找到，并给出下标值。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 没有顺序的数组</span></span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">11</span>, -<span class="number">1</span>, <span class="number">34</span>, <span class="number">89</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = seqSearch(arr, <span class="number">89</span>);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有找到"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"找到，下标为="</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">seqSearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线性查找是逐一比对，发现有相同值，就返回下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><p>请对一个有序数组进行二分查找{1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/erfenfenxi.jpg" alt="二分查找分析"></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：使用二分查找的前提是该数组是有序的。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> resIndex = binarySearch(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">1234</span>);</span><br><span class="line">        System.out.println(<span class="string">"resIndex="</span> + resIndex);</span><br><span class="line">        List&lt;Integer&gt; list = binarySearch2(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"resIndex="</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr     数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left    左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right   右边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到就返回下标，如果没有找到，就返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midVal) &#123;</span><br><span class="line">            <span class="comment">// 向右递归</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midVal) &#123;</span><br><span class="line">            <span class="comment">// 向左递归</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思考题： &#123;1,8, 10, 89, 1000, 1000，1234&#125; 当一个有序数组中，</span></span><br><span class="line"><span class="comment">     * 有多个相同的数值时，如何将所有的数值都查找到，比如这里的1000</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 思路分析</span></span><br><span class="line"><span class="comment">     * 1. 在找到mid 索引值，不要马上返回</span></span><br><span class="line"><span class="comment">     * 2. 向mid 索引值的左边扫描，将所有满足1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class="line"><span class="comment">     * 3. 向mid 索引值的右边扫描，将所有满足1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class="line"><span class="comment">     * 4. 将Arraylist 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">binarySearch2</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当left &gt; right 时，说明递归整个数组，但是没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midVal) &#123;</span><br><span class="line">            <span class="comment">// 向右递归</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch2(arr, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midVal) &#123;</span><br><span class="line">            <span class="comment">// 向左递归</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch2(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; resIndexlist = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="comment">// 向mid 索引值的左边扫描，将所有满足1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class="line">            <span class="keyword">int</span> temp = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 退出</span></span><br><span class="line">                <span class="keyword">if</span> (temp &lt; <span class="number">0</span> || arr[temp] != findVal) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则，就temp 放入到resIndexlist</span></span><br><span class="line">                resIndexlist.add(temp);</span><br><span class="line">                <span class="comment">// temp 左移</span></span><br><span class="line">                temp--;</span><br><span class="line">            &#125;</span><br><span class="line">            resIndexlist.add(mid);</span><br><span class="line">            <span class="comment">// 向mid 索引值的右边扫描，将所有满足1000， 的元素的下标，加入到集合ArrayList</span></span><br><span class="line">            temp = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 退出</span></span><br><span class="line">                <span class="keyword">if</span> (temp &gt; arr.length - <span class="number">1</span> || arr[temp] != findVal) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则，就temp 放入到resIndexlist</span></span><br><span class="line">                resIndexlist.add(temp);</span><br><span class="line">                <span class="comment">// temp 右移</span></span><br><span class="line">                temp++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resIndexlist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插值查找算法"><a href="#插值查找算法" class="headerlink" title="插值查找算法"></a>插值查找算法</h2><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>插值查找算法类似于二分查找，不同的是插值查找每次从自适应mid 处开始查找。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p>将折半查找中的求mid 索引的公式, low 表示左边索引left, high 表示右边索引right。</p><p>key 就是前面我们讲的findVal</p></li></ul><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/chazhiyuanli.jpg" alt="插值查找原理"></p><ul><li><p>int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low]) ;  //插值索引</p><p>对应前面的代码公式：int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</p></li></ul><h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/chazhifenxi.jpg" alt="插值查找分析"></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>请对一个有序数组进行插值查找{1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertValueSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> index = insertValueSearch(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">89</span>);</span><br><span class="line">        System.out.println(<span class="string">"index = "</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr     数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left    左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right   右边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到就返回下标，如果没有找到，就返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertValueSearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：findVal &lt; arr[0] 和findVal &gt; arr[arr.length - 1] 必须需要</span></span><br><span class="line">        <span class="comment">// 否则我们得到的mid 可能越界</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right || findVal &lt; arr[<span class="number">0</span>] || findVal &gt; arr[arr.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求出mid, 自适应</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class="line">        <span class="keyword">int</span> midVal = arr[mid];</span><br><span class="line">        <span class="comment">// 说明应该向右边递归</span></span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; midVal) &#123;</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(arr, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">            <span class="comment">// 说明向左递归查找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; midVal) &#123;</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>对于数据量较大，关键字分布比较均匀的查找表来说，采用插值查找, 速度较快。</p></li><li><p>关键字分布不均匀的情况下，该方法不一定比折半查找要好。</p></li></ul><h1 id="斐波那契-黄金分割法-查找算法"><a href="#斐波那契-黄金分割法-查找算法" class="headerlink" title="斐波那契(黄金分割法)查找算法"></a>斐波那契(黄金分割法)查找算法</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>黄金分割点是指把一条线段分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是0.618。由于按此比例设计的造型十分美丽，因此称为黄金分割，也称为中外比。这是一个神奇的数字，会带来意想不到的效果。</li><li>斐波那契数列{1, 1, 2, 3, 5, 8, 13, 21, 34, 55 } 发现斐波那契数列的两个相邻数的比例，无限接近黄金分割值0.618。</li></ul><h2 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h2><p>斐波那契查找原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid 不再是中间或插值得到，而是位于黄金分割点附近，即mid=low+F(k-1)-1（F 代表斐波那契数列），如下图所示</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/fbyuanli.jpg" alt="斐波那契查找原理"></p><p><strong>对F(k-1)-1 的理解：</strong></p><ul><li><p>由斐波那契数列F[k]=F[k-1]+F[k-2] 的性质，可以得到（F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1 。该式说明：只要顺序表的长度为F[k]-1，则可以将该表分成长度为F[k-1]-1 和F[k-2]-1 的两段，即如上图所示。从而中间位置为mid=low+F(k-1)-1。</p></li><li><p>类似的，每一子段也可以用相同的方式分割。</p></li><li><p>但顺序表长度n 不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n 增加至F[k]-1。这里的k 值只要能使得F[k]-1 恰好大于或等于n 即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1 到F[k]-1 位置），都赋为n 位置的值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n &gt; fib(k)-<span class="number">1</span>)&#123;</span><br><span class="line">   k++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>请对一个有序数组进行斐波那契查找{1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonacciSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"index="</span> + fibSearch(arr, <span class="number">89</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> maxSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class="line"><span class="comment">     * 非递归方法得到一个斐波那契数列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] fib() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 我们需要查找的关键码(值)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对应的下标，如果没有-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibSearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//表示斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 存放mid 值</span></span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 获取到斐波那契数列</span></span><br><span class="line">        <span class="keyword">int</span>[] f = fib();</span><br><span class="line">        <span class="comment">// 获取到斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">while</span> (high &gt; f[k] - <span class="number">1</span>) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k] 值可能大于a 的长度，因此我们需要使用Arrays 类，构造一个新的数组，并指向temp[]</span></span><br><span class="line">        <span class="comment">//不足的部分会使用0 填充</span></span><br><span class="line">        <span class="keyword">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class="line">        <span class="comment">//实际上需求使用a 数组最后的数填充temp</span></span><br><span class="line">        <span class="comment">//举例:</span></span><br><span class="line">        <span class="comment">//temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125; =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = a[high];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用while 来循环处理，找到我们的数key</span></span><br><span class="line">        <span class="comment">// 只要这个条件满足，就可以找</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[k - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 我们应该继续向数组的前面查找(左边)</span></span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 为甚是k--</span></span><br><span class="line">                <span class="comment">// 说明</span></span><br><span class="line">                <span class="comment">// 1. 全部元素= 前面的元素+ 后边元素</span></span><br><span class="line">                <span class="comment">// 2. f[k] = f[k-1] + f[k-2]</span></span><br><span class="line">                <span class="comment">// 因为前面有f[k-1]个元素,所以可以继续拆分f[k-1] = f[k-2] + f[k-3]</span></span><br><span class="line">                <span class="comment">// 即在f[k-1] 的前面继续查找k--</span></span><br><span class="line">                <span class="comment">// 即下次循环mid = f[k-1-1]-1</span></span><br><span class="line">                k--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;</span><br><span class="line">                <span class="comment">// 我们应该继续向数组的后面查找(右边)</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 为什么是k -=2</span></span><br><span class="line">                <span class="comment">// 说明</span></span><br><span class="line">                <span class="comment">// 1. 全部元素= 前面的元素+ 后边元素</span></span><br><span class="line">                <span class="comment">// 2. f[k] = f[k-1] + f[k-2]</span></span><br><span class="line">                <span class="comment">// 3. 因为后面我们有f[k-2] 所以可以继续拆分f[k-1] = f[k-3] + f[k-4]</span></span><br><span class="line">                <span class="comment">// 4. 即在f[k-2] 的前面进行查找k -=2</span></span><br><span class="line">                <span class="comment">// 5. 即下次循环mid = f[k - 1 - 2] - 1</span></span><br><span class="line">                k -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//找到</span></span><br><span class="line">                <span class="comment">// 需要确定，返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查找算法介绍&quot;&gt;&lt;a href=&quot;#查找算法介绍&quot; class=&quot;headerlink&quot; title=&quot;查找算法介绍&quot;&gt;&lt;/a&gt;查找算法介绍&lt;/h1&gt;&lt;p&gt;在java 中，我们常用的查找有四种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;顺序(线性)查找&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="数据结构和算法" scheme="https://lijingyuan.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://lijingyuan.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lijingyuan.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="查找算法" scheme="https://lijingyuan.top/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>重学Java数据结构和算法（排序算法）</title>
    <link href="https://lijingyuan.top/2019/07/13/%E9%87%8D%E5%AD%A6Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%EF%BC%88%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <id>https://lijingyuan.top/2019/07/13/重学Java数据结构和算法（排序算法）/</id>
    <published>2019-07-13T05:44:26.000Z</published>
    <updated>2019-07-19T07:55:14.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法的介绍"><a href="#排序算法的介绍" class="headerlink" title="排序算法的介绍"></a>排序算法的介绍</h1><p>排序也称排序算法(Sort Algorithm)，排序是将<strong>一组数据</strong>，依照<strong>指定的顺序</strong>进行<strong>排列的过程</strong>。</p><h1 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h1><ul><li><p>内部排序法</p><p>指将需要处理的所有数据都加载到内部存储器(内存)中进行排序。</p></li><li><p>外部排序法</p><p>数据量过大，无法全部加载到内存中，需要借助外部存储(文件等)进行排序。</p></li></ul><p><strong>常见的排序算法分类</strong></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/sortAlgorithmCategories.jpg" alt="排序算法分类"></p><h1 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h1><h2 id="度量一个程序-算法-执行时间的两种方法"><a href="#度量一个程序-算法-执行时间的两种方法" class="headerlink" title="度量一个程序(算法)执行时间的两种方法"></a>度量一个程序(算法)执行时间的两种方法</h2><ul><li><p>事后统计的方法</p><p>这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素, 这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。</p></li><li><p>事前估算的方法</p><p>通过分析某个算法的时间复杂度来判断哪个算法更优。</p></li></ul><h2 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h2><ul><li><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间<br>就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度</strong>。记为T(n)。</p></li><li><h3 id="举例说明-基本案例"><a href="#举例说明-基本案例" class="headerlink" title="举例说明-基本案例"></a>举例说明-基本案例</h3><p>比如计算1-100 所有数字之和, 我们设计两种算法：</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/tn.jpg" alt="tn"></p></li><li><h3 id="举例说明-忽略常数项"><a href="#举例说明-忽略常数项" class="headerlink" title="举例说明-忽略常数项"></a>举例说明-忽略常数项</h3></li></ul><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/changshu.jpg" alt="忽略常数"></p><p><strong>结论：</strong></p><ul><li><p>2n+20 和2n 随着n 变大，执行曲线无限接近, 20 可以忽略。</p></li><li><p>3n+10 和3n 随着n 变大，执行曲线无限接近, 10 可以忽略。</p></li><li><h3 id="举例说明-忽略常数低次项"><a href="#举例说明-忽略常数低次项" class="headerlink" title="举例说明-忽略常数低次项"></a>举例说明-忽略常数低次项</h3></li></ul><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/dici.jpg" alt="忽略低次项"></p><p><strong>结论：</strong></p><ul><li><p>2n<sup>2</sup>+3n+10 和2n<sup>2</sup> 随着n 变大, 执行曲线无限接近, 可以忽略3n+10。</p></li><li><p>n<sup>2</sup>+5n+20 和n<sup>2</sup>随着n 变大,执行曲线无限接近, 可以忽略5n+20。</p></li><li><h3 id="举例说明-忽略系数"><a href="#举例说明-忽略系数" class="headerlink" title="举例说明-忽略系数"></a>举例说明-忽略系数</h3></li></ul><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/xishu.jpg" alt="忽略系数"></p><p><strong>结论:</strong></p><ul><li>随着n 值变大，5n<sup>2</sup>+7n 和3n<sup>2</sup> + 2n ，执行曲线重合, 说明这种情况下, 5 和3 可以忽略。</li><li>而n<sup>3</sup>+5n 和6n<sup>3</sup>+4n ，执行曲线分离，说明多少次方式关键。</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n 的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</li><li>T(n) 不同，但时间复杂度可能相同。如：T(n)=n<sup>2</sup>+7n+6 与T(n)=3n<sup>2</sup>+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n<sup>2</sup>)。</li><li>计算时间复杂度的方法：<ul><li>用常数1 代替运行时间中的所有加法常数T(n)=n<sup>2</sup>+7n+6 =&gt; T(n)=n<sup>2</sup>+7n+1</li><li>修改后的运行次数函数中，只保留最高阶项T(n)=n<sup>2</sup>+7n+1 =&gt; T(n) = n<sup>2</sup></li><li>去除最高阶项的系数T(n) = n<sup>2</sup> =&gt; T(n) = n<sup>2</sup> =&gt; O(n<sup>2</sup>)</li></ul></li></ul><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><ol><li>常数阶O(1)</li><li>对数阶O(log<sub>2</sub>n)</li><li>线性阶O(n)</li><li>线性对数阶O(nlog<sub>2</sub>n)</li><li>平方阶O(n<sup>2</sup>)</li><li>立方阶O(n<sup>3</sup>)</li><li>k 次方阶O(n<sup>k</sup>)</li><li>指数阶O(2<sup>n</sup>)</li></ol><p><strong>常见的时间复杂度对应的图</strong>：</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/fuzadu.jpg" alt="复杂度"></p><p><strong>说明：</strong></p><ul><li><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log<sub>2</sub>n)＜Ο(n)＜Ο(nlog<sub>2</sub>n)＜Ο(n<sup>2</sup>)＜Ο(n<sup>3</sup>)＜ Ο(n<sup>k</sup>) ＜Ο(2<sup>n</sup>) ，随着问题规模n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p></li><li><p>从图中可见，我们应该尽可能避免使用指数阶的算法。</p></li></ul><h4 id="常数阶O-1"><a href="#常数阶O-1" class="headerlink" title="常数阶O(1)"></a>常数阶O(1)</h4><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)  。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/o1.jpg" alt="常数阶"></p><p>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。 </p><h4 id="对数阶O-log2n"><a href="#对数阶O-log2n" class="headerlink" title="对数阶O(log2n)"></a>对数阶O(log<sub>2</sub>n)</h4><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/log2n.jpg" alt="对数阶"></p><p><strong>说明：</strong></p><p>在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log<del>2</del>n也就是说当循环 log<sub>2</sub>n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log<sub>2</sub>)  。 O(log<sub>2</sub>) 的这个2 时间上是根据代码变化的，i = i * 3 ，则是 O(log<sub>3</sub>n) 。</p><h4 id="线性阶O-n"><a href="#线性阶O-n" class="headerlink" title="线性阶O(n)"></a>线性阶O(n)</h4><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/on.jpg" alt="线性阶"></p><p><strong>说明：</strong></p><p>这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度 。</p><h4 id="线性对数阶O-nlogN"><a href="#线性对数阶O-nlogN" class="headerlink" title="线性对数阶O(nlogN)"></a>线性对数阶O(nlogN)</h4><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/nlogn.jpg" alt="线性对数阶"></p><p><strong>说明：</strong></p><p>线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN) 。</p><h4 id="平方阶O-n2"><a href="#平方阶O-n2" class="headerlink" title="平方阶O(n2)"></a>平方阶O(n<sup>2</sup>)</h4><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/pingfang.jpg" alt="平方阶"></p><p><strong>说明：</strong></p><p>平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n<sup>2</sup>)，这段代码其实就是嵌套了2层n循环 ，它的时间复杂度就是 O(n<sup>2</sup>)，即  O(n<sup>2</sup>) 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m*n) 。</p><h4 id="立方阶O-n3-、K次方阶O-nk"><a href="#立方阶O-n3-、K次方阶O-nk" class="headerlink" title="立方阶O(n3)、K次方阶O(nk)"></a>立方阶O(n<sup>3</sup>)、K次方阶O(n<sup>k</sup>)</h4><p><strong>说明：</strong></p><p>参考上面的O(n<sup>2</sup>) 去理解就好了，O(n<sup>3</sup>)相当于三层n循环，其它的类似。</p><h3 id="平均时间复杂度和最坏时间复杂度"><a href="#平均时间复杂度和最坏时间复杂度" class="headerlink" title="平均时间复杂度和最坏时间复杂度"></a>平均时间复杂度和最坏时间复杂度</h3><ul><li><p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</p></li><li><p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</p></li><li><p>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图)。</p></li></ul><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/fuzadubiao.jpg" alt="平均时间复杂度和最坏时间复杂度"></p><h1 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n 的函数。</li><li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n 有关，它随着n 的增大而增大，当n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法， 基数排序就属于这种情况。</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间。</li></ul><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p><h2 id="冒泡排序思路分析图"><a href="#冒泡排序思路分析图" class="headerlink" title="冒泡排序思路分析图"></a>冒泡排序思路分析图</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/bubbletujie.jpg" alt="冒泡图解"></p><p><strong>结论：</strong></p><ul><li>一共进行数组的大小-1 次大的循环</li><li>每一趟排序的次数在逐渐的减少</li><li>如果我们发现在某趟排序中，没有发生一次交换， 可以提前结束冒泡排序。这个就是优化</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>对数组[3, 9, -1, 10, -2]进行冒泡排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">9</span>, -<span class="number">1</span>, <span class="number">10</span>, -<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">// 临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果前面的数比后面的数大，则交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"趟排序后的数组"</span>);</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag 判断元素是否进行过交换。从而减少不必要的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">9</span>, -<span class="number">1</span>, <span class="number">10</span>, -<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">// 临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 标识变量，表示是否进行过交换</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果前面的数比后面的数大，则交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"趟排序后的数组"</span>);</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="comment">// 在一趟排序中, 一次交换都没有发生过</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 重置flag!!!, 进行下次判断</span></span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</p><h2 id="选择排序思想"><a href="#选择排序思想" class="headerlink" title="选择排序思想"></a>选择排序思想</h2><p>选择排序（select sorting）也是一种简单的排序方法。它的基本思想是：第一次从arr[0]-arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]-arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]-arr[n-1]中选取最小值，与arr[2]交换，…，第i 次从arr[i-1]-arr[n-1]中选取最小值，与arr[i-1]交换，…, 第n-1 次从arr[n-2]-arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1 次，得到一个按排序码从小到大排列的有序序列。</p><h2 id="选择排序思路分析图"><a href="#选择排序思路分析图" class="headerlink" title="选择排序思路分析图"></a>选择排序思路分析图</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/xuanzefenxi.jpg" alt="选择排序分析"></p><p>对一个数组的选择排序再进行讲解</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/xuanzetujie.jpg" alt="选择排序图解"></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>对数组[101, 34, 119, 1]进行选择排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">101</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">int</span> min = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 说明假定的最小值，并不是最小</span></span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">                    <span class="comment">// 重置min</span></span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    <span class="comment">// 重置minIndex</span></span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将最小值，放在arr[i], 即交换</span></span><br><span class="line">            <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">                arr[minIndex] = arr[i];</span><br><span class="line">                arr[i] = min;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + (i + <span class="number">1</span>) + <span class="string">"轮后~~"</span>);</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p><h2 id="插入排序思想"><a href="#插入排序思想" class="headerlink" title="插入排序思想"></a>插入排序思想</h2><p>插入排序（Insertion Sorting）的基本思想是：把n 个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1 个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p><h2 id="插入排序思路分析图"><a href="#插入排序思路分析图" class="headerlink" title="插入排序思路分析图"></a>插入排序思路分析图</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/charufenxi.jpg" alt="插入排序图解"></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>对数组[101, 34, 119, 1]进行选择排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">101</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> insertValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> insertIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            insertIndex = i - <span class="number">1</span>;</span><br><span class="line">            insertValue = arr[i];</span><br><span class="line">            <span class="comment">// 定义待插入的数</span></span><br><span class="line">            <span class="comment">// 说明</span></span><br><span class="line">            <span class="comment">// 1. insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span></span><br><span class="line">            <span class="comment">// 2. insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置</span></span><br><span class="line">            <span class="comment">// 3. 就需要将arr[insertIndex] 后移</span></span><br><span class="line">            <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertValue &lt; arr[insertIndex]) &#123;</span><br><span class="line">                <span class="comment">// 移位 排序过的元素右移一格</span></span><br><span class="line">                arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">                insertIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当退出while 循环时，说明插入的位置找到, insertIndex + 1</span></span><br><span class="line">            <span class="comment">// 这里我们判断是否需要赋值</span></span><br><span class="line">            <span class="keyword">if</span> (insertIndex + <span class="number">1</span> != i) &#123;</span><br><span class="line">                arr[insertIndex + <span class="number">1</span>] = insertValue;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"轮插入"</span>);</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="简单插入排序存在的问题"><a href="#简单插入排序存在的问题" class="headerlink" title="简单插入排序存在的问题"></a>简单插入排序存在的问题</h2><p>我们看简单的插入排序可能存在的问题。数组arr = {2,3,4,5,6,1} 这时需要插入的数1(最小), 这样的过程是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;2,3,4,5,6,6&#125;</span><br><span class="line">&#123;2,3,4,5,5,6&#125;</span><br><span class="line">&#123;2,3,4,4,5,6&#125;</span><br><span class="line">&#123;2,3,3,4,5,6&#125;</span><br><span class="line">&#123;2,2,3,4,5,6&#125;</span><br><span class="line">&#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：</strong>当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响。</p><h2 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>希尔排序是希尔（Donald Shell）于1959 年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</p><h2 id="希尔排序思想"><a href="#希尔排序思想" class="headerlink" title="希尔排序思想"></a>希尔排序思想</h2><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1 时，整个文件恰被分成一组，算法便终止。</p><h2 id="希尔排序思路分析图"><a href="#希尔排序思路分析图" class="headerlink" title="希尔排序思路分析图"></a>希尔排序思路分析图</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/xiertujie1.jpg" alt="希尔排序图解1"></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/xiertujie2.jpg" alt="希尔排序图解2"></p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>对数组[8,9,1,7,2,3,5,4,6,0]进行希尔排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 增量gap, 并逐步的缩小增量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 从第gap个元素开始，逐个对每个组来排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class="line">                        <span class="comment">//移动</span></span><br><span class="line">                        arr[j] = arr[j - gap];</span><br><span class="line">                        j -= gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//当退出while 后，就给temp找到插入的位置</span></span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"希尔排序第"</span> + (++count) + <span class="string">"轮="</span> + Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><h2 id="快速排序思路分析图"><a href="#快速排序思路分析图" class="headerlink" title="快速排序思路分析图"></a>快速排序思路分析图</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/kuaisufenxi1.jpg" alt="快速排序图解1"></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/kuaisufenxi2.jpg" alt="快速排序图解1"></p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><p>对数组[-9,78,0,23,-567,70]进行快速排序。</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><h2 id="归并排序思想"><a href="#归并排序思想" class="headerlink" title="归并排序思想"></a>归并排序思想</h2><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/guibingsixiang.jpg" alt="归并排序思想"></p><h2 id="归并排序思路分析图"><a href="#归并排序思路分析图" class="headerlink" title="归并排序思路分析图"></a>归并排序思路分析图</h2><p>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/guibingfenxi.jpg" alt="归并排序分析"></p><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="基数排序-桶排序-基本介绍"><a href="#基数排序-桶排序-基本介绍" class="headerlink" title="基数排序(桶排序)基本介绍"></a>基数排序(桶排序)基本介绍</h2><ol><li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用。</li><li>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法。</li><li>基数排序(Radix Sort)是桶排序的扩展。</li><li>基数排序是1887 年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</li></ol><h2 id="基数排序基本思想"><a href="#基数排序基本思想" class="headerlink" title="基数排序基本思想"></a>基数排序基本思想</h2><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><h2 id="基数排序思路分析图"><a href="#基数排序思路分析图" class="headerlink" title="基数排序思路分析图"></a>基数排序思路分析图</h2><p>将数组{53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/jishufenxi1.jpg" alt="基数排序分析1"></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/jishufenxi2.jpg" alt="基数排序分析2"></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/jishufenxi3.jpg" alt="基数排序分析3"></p><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="基数排序的说明"><a href="#基数排序的说明" class="headerlink" title="基数排序的说明"></a>基数排序的说明</h2><ul><li><p>基数排序是对传统桶排序的扩展，速度很快。</p></li><li><p>基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成OutOfMemoryError 。</p></li><li><p>基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。</p></li><li><p>有负数的数组，我们不用基数排序来进行排序, 如果要支持负数，<a href="https://code.i-harness.com/zh-CN/q/e98fa9" target="_blank" rel="noopener">请参考这篇文章</a>。</p></li></ul><h1 id="常用排序算法总结和对比"><a href="#常用排序算法总结和对比" class="headerlink" title="常用排序算法总结和对比"></a>常用排序算法总结和对比</h1><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/algorithmAndDataStructure/duibitu.jpg" alt="对比图"></p><p><strong>相关术语解释：</strong></p><ul><li>稳定：如果a 原本在b 前面，而a=b，排序之后a 仍然在b 的前面；</li><li>不稳定：如果a 原本在b 的前面，而a=b，排序之后a 可能会出现在b 的后面；</li><li>内排序：所有排序操作都在内存中完成；</li><li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>时间复杂度： 一个算法执行所耗费的时间；</li><li>空间复杂度：运行完一个程序所需内存的大小；</li><li>n: 数据规模；</li><li>k: “桶”的个数；</li><li>In-place: 不占用额外内存；</li><li>Out-place: 占用额外内存；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序算法的介绍&quot;&gt;&lt;a href=&quot;#排序算法的介绍&quot; class=&quot;headerlink&quot; title=&quot;排序算法的介绍&quot;&gt;&lt;/a&gt;排序算法的介绍&lt;/h1&gt;&lt;p&gt;排序也称排序算法(Sort Algorithm)，排序是将&lt;strong&gt;一组数据&lt;/strong&gt;
      
    
    </summary>
    
      <category term="数据结构和算法" scheme="https://lijingyuan.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://lijingyuan.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lijingyuan.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序算法" scheme="https://lijingyuan.top/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建个人博客（Hexo篇）</title>
    <link href="https://lijingyuan.top/2019/07/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88Hexo%E7%AF%87%EF%BC%89/"/>
    <id>https://lijingyuan.top/2019/07/08/从零开始搭建个人博客（Hexo篇）/</id>
    <published>2019-07-08T06:34:21.000Z</published>
    <updated>2019-07-16T01:19:38.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本教程使用的软件版本：</p><ul><li><p>win10（1903 版）</p></li><li><p>git（2.22）</p></li><li><p>node（10.15.3）</p></li><li><p>hexo（3.9.0）</p></li></ul><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>访问<a href="https://gitforwindows.org/" target="_blank" rel="noopener">git官网</a>下载后完成安装，完成后右键会有git bash命令行出现，以后用这个命令行工具来操作git。推荐廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">git教程</a>，可以用作入门。</p><p>安装后输入查看版本命令<code>git --version</code>来验证git是否已正常安装。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/gitVersion.png" alt="git版本"></p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>访问<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node官网</a>下载适合版本完成安装，完成后输入查看版本命令<code>node-v</code>和<code>npm-v</code>来验证git是否已正常安装。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/node-v.png" alt="node版本"></p><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><p>因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，所以需要安装cnpm。</p><p>输入如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>安装完成后输入查看版本命令<code>cpnm -v</code>验证是否已正常安装。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/cnpm.png" alt="cpmn版本"></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>输入如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/install.png" alt="install"></p><p>安装完成后依然通过查看版本命令<code>hexo -v</code>来验证是否已正常安装完成。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/hexo-v.png" alt="hexo版本"></p><p>安装完成后开始进行初始化工作。</p><p>在本地磁盘建立博客文件夹，以我为例，在G盘建立blog文件夹。然后通过git bash或者cmd窗口进入到该文件夹，输入<code>hexo init</code>命令。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/init.png" alt="hexo init"></p><p>新建完成后可以发现hexo在文件夹下自动建立了如下目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/dir.png" alt="hexo dir"></p><ul><li>_config.yml：网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，我们在此会配置大部分的参数。 </li><li>scaffolds：模版文件夹。当新建文章时，hexo会根据 scaffold 来建立文件。</li><li>source：资源文件夹。是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li><li>themes：主题文件夹。hexo会根据主题来生成静态页面。</li></ul><p>到此，安装基本完成了，下面我们来执行<code>hexo s</code>命令在本地启动看一下效果。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/hexoStart.png" alt="hexo"></p><p>提示我们启动在了4000端口，可以通过<code>Ctrl+C</code>命令来终止服务。在浏览器输入<code>http://localhost:4000</code>就能看到生成的博客了。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/start.png" alt="hexo start"></p><h1 id="写下第一篇文章"><a href="#写下第一篇文章" class="headerlink" title="写下第一篇文章"></a>写下第一篇文章</h1><p>下面介绍一下怎样完成一篇文章并发布。</p><p>在 blog 目录下输入<code>hexo n &quot;我的第一篇文章&quot;</code>命令来新建一篇文件。然后<code>cd</code>到 source/_post 目录，会发现hexo已经帮我们新建了<code>我的第一篇文章.md</code>文件，我们通过typora编辑该文件，完成第一篇文章。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/demo.png" alt="demo"></p><p>下面回到blog目录，依次执行<code>hexo clean</code>和<code>hexo generate</code>命令来生成刚才编写的文章。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/generate.png" alt="generate"></p><p>完成后，还是执行<code>hexo s</code>命令在本地查看一下我们刚才写的文章。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/first.png" alt="first"></p><h1 id="将hexo部署到github"><a href="#将hexo部署到github" class="headerlink" title="将hexo部署到github"></a>将hexo部署到github</h1><h2 id="在github新建仓库。"><a href="#在github新建仓库。" class="headerlink" title="在github新建仓库。"></a>在github新建仓库。</h2><p>注意，仓库名称应该是用户名+.github.io，因为只有这样，部署到GitHub page时才会被识别。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/res.png" alt="res"></p><h2 id="本地安装hexo的git插件"><a href="#本地安装hexo的git插件" class="headerlink" title="本地安装hexo的git插件"></a>本地安装hexo的git插件</h2><p>执行<code>cpnm install hexo-deployer-git --save</code>命令完成安装。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/hexo-deployer-git.png" alt="hexo-deployer-git"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改 blog 目录下的 _config.yml 文件，将git仓库地址和分支信息填上。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/config.png" alt="config"></p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>执行<code>hexo d</code>命令将本地文章同步到github。第一次需要输入github账号和密码。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/deloy.png" alt="deploy"></p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/done.png" alt="done"></p><p>执行完成后，可以看到已经同步到远端了。</p><p>到github仓库中查看一下，同样也发现文章已经同步过来了。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/github.png" alt="github"></p><p>在浏览器输入<code>http://yourname.github.io</code>就能看到你的博客了。</p><p><img src="https://blog-1259650185.cos.ap-beijing.myqcloud.com/blog/2019-07/hexo/over1.png" alt="github"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hex
      
    
    </summary>
    
      <category term="工具" scheme="https://lijingyuan.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="博客" scheme="https://lijingyuan.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="零基础" scheme="https://lijingyuan.top/tags/%E9%9B%B6%E5%9F%BA%E7%A1%80/"/>
    
      <category term="个人网站" scheme="https://lijingyuan.top/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    
      <category term="hexo" scheme="https://lijingyuan.top/tags/hexo/"/>
    
  </entry>
  
</feed>
